#!/bin/bash
#=========================================================================
# Function: Install docker to armbian
# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian

# Command: armbian-docker
#=========================================================================

# Set font color
blue_font_prefix="\033[34m"
purple_font_prefix="\033[35m"
green_font_prefix="\033[32m"
yellow_font_prefix="\033[33m"
red_font_prefix="\033[31m"
font_color_suffix="\033[0m"
INFO="[${blue_font_prefix}INFO${font_color_suffix}]"
STEPS="[${purple_font_prefix}STEPS${font_color_suffix}]"
SUCCESS="[${green_font_prefix}SUCCESS${font_color_suffix}]"
OPT="[${yellow_font_prefix}OPT${font_color_suffix}]"
ERROR="[${red_font_prefix}ERROR${font_color_suffix}]"

echo -e "${INFO} Welcome to docker installation tool."

echo -e "${STEPS} Initialize the docker installation environment ... "
sudo apt-get update
sudo apt-get remove -y docker docker-engine docker.io containerd runc
sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common

# Install GPG certificate
# sudo curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
sudo curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | apt-key add -

# Add software source information
# sudo add-apt-repository "deb [arch=arm64,armhf] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
sudo add-apt-repository "deb [arch=arm64,armhf] https://mirrors.aliyun.com/docker-ce/linux/debian $(lsb_release -cs) stable"

echo -e "${STEPS} Install docker related packages ... "
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io

echo -e "${STEPS} Install docker accelerator ... "
sudo cat >/etc/docker/daemon.json <<EOF
{
  "bip": "172.31.0.1/24",
  "data-root": "/var/lib/docker/",
  "log-level": "warn",
  "log-driver": "json-file",
  "log-opts": {
     "max-size": "10m",
     "max-file": "5"
   },
  "registry-mirrors": [
     "https://docker.mirrors.ustc.edu.cn",
     "https://registry.cn-shanghai.aliyuncs.com",
     "https://hub-mirror.c.163.com"
   ]
}
EOF
sync
sudo systemctl daemon-reload
sudo systemctl restart docker

# Set up ordinary users to run docker directly
sudo usermod -a -G docker $USER 2>/dev/null

echo -e "${SUCCESS} Docker installed successfully."

# No SSL certificate, http LAN access
portainer_lan() {
    echo -e "${STEPS} Select Install Portainer (No SSL certificate, http LAN access)... "
    sudo docker volume create portainer_data
    sudo docker run -d -p 9000:9000 --name portainer --restart always --name=portainer --label owner=portainer -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer:linux-arm64
    echo -e "${SUCCESS} The portainer address [ http://ip:9000 ]"
}

# Have SSL certificate, install domain name certificate https access
portainer_domain() {
    echo -e "${STEPS} Select Install Portainer (Have SSL certificate, install domain name certificate https access)... "
    sudo docker volume create portainer_data
    sudo docker run -d -p 9000:9000 --name portainer --restart always --name=portainer --label owner=portainer -v /var/run/docker.sock:/var/run/docker.sock -v /etc/ssl:/certs -v portainer_data:/data portainer/portainer:linux-arm64 --ssl --sslcert /certs/portainer.crt --sslkey /certs/portainer.key
    echo -e "${INFO} Please rename and upload the domain certificate [ portainer.crt & portainer.key ] to the [ /etc/ssl/ ] directory."
    echo -e "${SUCCESS} The portainer address [ https://domain:9000 ]"
}

echo -ne "${OPT} Select Install Portainer? No=(n) / LAN ip access=(h) / Domain cert access=(s): "
read pt
case ${pt} in
    h | H | http) portainer_lan ;;
    s | S | https) portainer_domain ;;
    *) echo -e "${INFO} Finish the installation." && exit 0 ;;
esac

exit 0
